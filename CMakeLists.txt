# PicoWi project, see http://iosoft.blog/picowi for details

# Set debug or release version
#set (RELEASE 1)

cmake_minimum_required(VERSION 3.12)
include(../PicoPiFi/pico-sdk/pico_sdk_init.cmake)
pico_sdk_init()
include(../PicoPiFi/pico-sdk/tools/CMakeLists.txt)

# Set name of project (as PROJECT_NAME) and C/C++ standards
project(picowi C CXX ASM)
include(PicoSDKConfig.cmake)
set(CMAKE_C_STANDARD 11)

# Set to 0 for Pico-W CYW43439, 1 for Murata 1DX (CYW4343W)
# It may be necessary to reduce PIO_SPI_FREQ when using an external device
#set (CHIP_4343W 1)

# Picowi library souce files
set (PICOWI_SRCE       lib/picowi_pico.c  lib/picowi_init.c
    lib/picowi_wifi.c  lib/picowi_ioctl.c lib/picowi_scan.c 
    lib/picowi_event.c lib/picowi_join.c  lib/picowi_pio.c
    lib/picowi_ip.c    lib/picowi_udp.c   lib/picowi_dhcp.c
    lib/picowi_dns.c   lib/picowi_net.c   lib/picowi_tcp.c
    lib/picowi_web.c)

# Firmware file for CYW43439 or CYW4343W
if (${CHIP_4343W})
    message (STATUS "Building CYW4343W version")
    set (FW_FILE firmware/fw_4343w.c)
    add_compile_options(-DCHIP_4343W)
else ()
    message (STATUS "Building Pico-W CYW43439 version")
    set (FW_FILE firmware/fw_43439.c)
endif ()

# Enable compiler warnings
add_compile_options(-Wall)

# Use optimisation for release version
if (${RELEASE})
    add_compile_options(-O3 -DNDEBUG)
endif ()

# Create picowi library
add_library(picowi ${PICOWI_SRCE} ${FW_FILE})
pico_generate_pio_header(${PROJECT_NAME} ${CMAKE_CURRENT_LIST_DIR}/lib/picowi_pio.pio)
target_link_libraries(picowi pico_stdlib hardware_pio hardware_dma)

add_compile_options(-Wall
        -Wno-format          # int != int32_t as far as the compiler is concerned because gcc has int32_t as long int
        -Wno-unused-function # we have some for the docs that aren't called
        -Wno-maybe-uninitialized
        )

set(cherry_dir ../PicoPiFi/CherryUSB/)

set(LWIP_DIR ../PicoPiFi/pico-sdk/lib/lwip)
set (LWIP_INCLUDE_DIRS
    "${LWIP_DIR}/src/include"
    "${CMAKE_CURRENT_SOURCE_DIR}"
)

include_directories(${CMAKE_CURRENT_LIST_DIR}
    ${cherry_dir}/class/cdc
    ${cherry_dir}/class/msc
    ${cherry_dir}/class/wireless

    ${cherry_dir}/common
    ${cherry_dir}/core
    ${cherry_dir}/demo
    ${cherry_dir}/port/rp2040
	#lwip directory:-
	${LWIP_INCLUDE_DIRS}
	#lwipopts.h ke liye
	${CMAKE_CURRENT_LIST_DIR}/src
	#arch/cc.h ke liye:-
	${CMAKE_CURRENT_LIST_DIR}/common
)


add_library(cherryusblib STATIC)
target_sources(cherryusblib PRIVATE ${cherry_dir}/port/rp2040/usb_dc_rp2040.c)
target_sources(cherryusblib PRIVATE ${cherry_dir}/class/cdc/usbd_cdc.c)
target_sources(cherryusblib PRIVATE ${cherry_dir}/class/msc/usbd_msc.c)
target_sources(cherryusblib PRIVATE ${cherry_dir}/class/wireless/usbd_rndis.c)
target_sources(cherryusblib PRIVATE ${cherry_dir}/core/usbd_core.c)

set(CONFIG_CHERRYUSB 1)
set(CONFIG_USB_DEVICE 1)
set(CONFIG_USB_DEVICE_RNDIS 1)
set(CONFIG_LWIP 1)
set(CONFIG_LWIP_HTTPSRV 1)

if("${CMAKE_BUILD_TYPE}" STREQUAL "")
    SET(CMAKE_BUILD_TYPE flash_xip)
endif()



# Create 'blink' executable
add_executable(blink blink.c)
target_link_libraries(blink picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(blink)

# Create 'scan' executable
add_executable(scan scan.c)
target_link_libraries(scan picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(scan)

# Create 'join' executable
add_executable(join join.c)
target_link_libraries(join picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(join)

# Create 'join' executable
add_executable(join_usb_rndis join_usb_rndis.c ${CMAKE_CURRENT_SOURCE_DIR}/src/cdc_rndis_device.c ${CMAKE_CURRENT_SOURCE_DIR}/src/lwip.c ${LWIP_DIR}/src/core/pbuf.c ${LWIP_DIR}/src/core/mem.c ${LWIP_DIR}/src/core/memp.c ${LWIP_DIR}/src/core/stats.c)
target_link_libraries(join_usb_rndis picowi pico_stdlib hardware_pio hardware_dma cherryusblib)
pico_add_extra_outputs(join_usb_rndis)

# Create 'ping' executable
add_executable(ping ping.c)
target_link_libraries(ping picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(ping)

# Create 'dhcp' executable
add_executable(dhcp dhcp.c)
target_link_libraries(dhcp picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(dhcp)

# Create 'dns' executable
add_executable(dns dns.c)
target_link_libraries(dns picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(dns)

# Create 'udp_socket_server' executable
add_executable(udp_socket_server udp_socket_server.c)
target_link_libraries(udp_socket_server picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(udp_socket_server)

# Create 'web_server' executable
add_executable(web_server web_server.c)
target_link_libraries(web_server picowi pico_stdlib hardware_pio hardware_dma)
pico_add_extra_outputs(web_server)

# Create 'web_server' executable
add_executable(web_server_usb_rndis web_server_usb_rndis.c  ${CMAKE_CURRENT_SOURCE_DIR}/src/cdc_rndis_device.c ${CMAKE_CURRENT_SOURCE_DIR}/src/lwip.c ${LWIP_DIR}/src/core/pbuf.c ${LWIP_DIR}/src/core/mem.c ${LWIP_DIR}/src/core/memp.c ${LWIP_DIR}/src/core/stats.c)
target_link_libraries(web_server_usb_rndis picowi pico_stdlib hardware_pio hardware_dma cherryusblib)
pico_add_extra_outputs(web_server_usb_rndis)



# Create 'web_cam' executable
#add_executable(web_cam web_cam.c camera/cam_5642.c)
add_executable(web_cam web_cam.c camera/cam_2640.c)
target_link_libraries(web_cam picowi pico_stdlib hardware_i2c hardware_spi hardware_dma)
pico_add_extra_outputs(web_cam)

# EOF
